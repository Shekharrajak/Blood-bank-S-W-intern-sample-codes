import javax.swing.*;

import LookAndFeelDemo.ItemHandler;

import java.awt.event.*;
import java.awt.*;


public class menu_panel extends JFrame {
   private Color colorValues[] = 
      { Color.black, Color.blue, Color.red, Color.green };   
   private JRadioButtonMenuItem colorItems[], fonts[];
   private JCheckBoxMenuItem styleItems[];
   private JLabel display;
   private ButtonGroup fontGroup, colorGroup;
   private int style;
   
   private String strings[] = { "Metal", "Motif", "Windows" };
   private UIManager.LookAndFeelInfo looks[];
   private JRadioButton radio[];
   private ButtonGroup group;
   private JButton button;
   private JLabel label;
   private JComboBox comboBox;

   public menu_panel()
   {
      super( "---- Vehicle module Blood Bank ----" );   
      Container c = getContentPane();

      JMenuBar bar = new JMenuBar();  // create menubar
      setJMenuBar( bar );  // set the menubar for the JFrame

      // create File menu and Exit menu item
      JMenu fileMenu = new JMenu( "File" );
      fileMenu.setMnemonic( 'F' );
      JMenuItem aboutItem = new JMenuItem( "About..." );
      aboutItem.setMnemonic( 'A' );
      aboutItem.addActionListener(
         new ActionListener() {
            public void actionPerformed( ActionEvent e )
            {
               JOptionPane.showMessageDialog( menu_panel.this,
                  "This is an example\nof using menus",
                  "About", JOptionPane.PLAIN_MESSAGE );
            }
         }
      );
      fileMenu.add( aboutItem );

      JMenuItem exitItem = new JMenuItem( "Exit" );
      exitItem.setMnemonic( 'x' );
      exitItem.addActionListener(
         new ActionListener() {
            public void actionPerformed( ActionEvent e )
            {
               System.exit( 0 );
            }
         }
      );
      fileMenu.add( exitItem );
      bar.add( fileMenu );    // add File menu
      
      //Driver info 
      JMenu infoMenu = new JMenu( "Informations" );
      fileMenu.setMnemonic( 'I' );
      JMenuItem driverItem = new JMenuItem( "Driver" );
      driverItem.setMnemonic( 'D' );
      driverItem.addActionListener(
         new ActionListener() {
            public void actionPerformed( ActionEvent e )
            {
               JOptionPane.showMessageDialog( menu_panel.this,
                  "This contains\n information of",
                  "Drvier", JOptionPane.PLAIN_MESSAGE );
            }
         }
      );
      infoMenu.add( driverItem );
      
      JMenuItem vehicleItem = new JMenuItem( "Vehicle" );
      vehicleItem.setMnemonic( 'D' );
      vehicleItem.addActionListener(
         new ActionListener() {
            public void actionPerformed( ActionEvent e )
            {
               JOptionPane.showMessageDialog( menu_panel.this,
                  "This contains\n information of",
                  "Vehicle", JOptionPane.PLAIN_MESSAGE );
            }
         }
      );
      infoMenu.add( vehicleItem );
      
      JMenuItem storedItem = new JMenuItem( "Stored Blood" );
      storedItem.setMnemonic( 'D' );
      storedItem.addActionListener(
         new ActionListener() {
            public void actionPerformed( ActionEvent e )
            {
               JOptionPane.showMessageDialog( menu_panel.this,
                  "This contains\n information of",
                  "Blood bank", JOptionPane.PLAIN_MESSAGE );
            }
         }
      );
      infoMenu.add( storedItem );
      bar.add(infoMenu);
      

      // create the Format menu, its submenus and menu items
      JMenu formatMenu = new JMenu( "Format" );  
      formatMenu.setMnemonic( 'r' );

      // create Color submenu
      String colors[] = 
         { "Black", "Blue", "Red", "Green" };
      JMenu colorMenu = new JMenu( "Color" );
      colorMenu.setMnemonic( 'C' );
      colorItems = new JRadioButtonMenuItem[ colors.length ];
      colorGroup = new ButtonGroup();
      ItemHandler itemHandler = new ItemHandler();

      for ( int i = 0; i < colors.length; i++ ) {
         colorItems[ i ] = 
            new JRadioButtonMenuItem( colors[ i ] );
         colorMenu.add( colorItems[ i ] );
         colorGroup.add( colorItems[ i ] );
         colorItems[ i ].addActionListener( itemHandler );
      }

      colorItems[ 0 ].setSelected( true );
      formatMenu.add( colorMenu );
      formatMenu.addSeparator();

      // create Font submenu
      String fontNames[] = 
         { "TimesRoman", "Courier", "Helvetica" };
      JMenu fontMenu = new JMenu( "Font" ); 
      fontMenu.setMnemonic( 'n' );
      fonts = new JRadioButtonMenuItem[ fontNames.length ];
      fontGroup = new ButtonGroup();

      for ( int i = 0; i < fonts.length; i++ ) {
         fonts[ i ] =
            new JRadioButtonMenuItem( fontNames[ i ] );
         fontMenu.add( fonts[ i ] );
         fontGroup.add( fonts[ i ] );
         fonts[ i ].addActionListener( itemHandler );
      }

      fonts[ 0 ].setSelected( true );
      fontMenu.addSeparator();

      String styleNames[] = { "Bold", "Italic" };
      styleItems = new JCheckBoxMenuItem[ styleNames.length ];
      StyleHandler styleHandler = new StyleHandler();

      for ( int i = 0; i < styleNames.length; i++ ) {
         styleItems[ i ] =
            new JCheckBoxMenuItem( styleNames[ i ] );
         fontMenu.add( styleItems[ i ] );
         styleItems[ i ].addItemListener( styleHandler );
      }

      formatMenu.add( fontMenu );
      bar.add( formatMenu );  // add Format menu
      
     // c.add(bar);
     
      display = new JLabel(
         "Sample Text", SwingConstants.CENTER );
      display.setForeground( colorValues[ 0 ] );
      display.setFont( 
         new Font( "TimesRoman", Font.PLAIN, 72 ) );

      getContentPane().setBackground( Color.cyan );
      getContentPane().add( display, BorderLayout.CENTER );

      setSize( 2000, 1024 );
      
      //look and feel 
      
      JPanel northPanel = new JPanel();
      northPanel.setLayout( new GridLayout( 3, 1, 0, 5 ) );
      label = new JLabel( "This is a Metal look-and-feel", SwingConstants.CENTER );
      northPanel.add( label );
      button = new JButton( "JButton" );
      northPanel.add( button );
      comboBox = new JComboBox( strings );
      northPanel.add( comboBox );
     
      c.add( northPanel, BorderLayout.NORTH );
      
      JPanel southPanel = new JPanel();
      radio = new JRadioButton[ strings.length ];
      group = new ButtonGroup();
      ItemHandler handler = new ItemHandler();
      southPanel.setLayout(
         new GridLayout( 1, radio.length ) );

      for ( int i = 0; i < radio.length; i++ ) {
         radio[ i ] = new JRadioButton( strings[ i ] );
         radio[ i ].addItemListener( handler );
         group.add( radio[ i ] );
         southPanel.add( radio[ i ] );
      }

      c.add( southPanel, BorderLayout.SOUTH );

      // get the installed look-and-feel information
      looks = UIManager.getInstalledLookAndFeels();
      
      show();
   }

   public static void main( String args[] )
   {
	   menu_panel app = new menu_panel();

      app.addWindowListener(
         new WindowAdapter() {
            public void windowClosing( WindowEvent e )
            {
               System.exit( 0 );
            }
         }
      );
   }

   class ItemHandler implements ActionListener {
      public void actionPerformed( ActionEvent e )
      {
         for ( int i = 0; i < colorItems.length; i++ )         
            if ( colorItems[ i ].isSelected() ) {
               display.setForeground( colorValues[ i ] );
               break;
            }
 
         for ( int i = 0; i < fonts.length; i++ )
            if ( e.getSource() == fonts[ i ] ) {
               display.setFont( new Font( 
                  fonts[ i ].getText(), style, 72 ) );
               break;
            }

         repaint();   
      }
   }

   class StyleHandler implements ItemListener {
      public void itemStateChanged( ItemEvent e )
      {
         style = 0;

         if ( styleItems[ 0 ].isSelected() )
            style += Font.BOLD;

         if ( styleItems[ 1 ].isSelected() )
            style += Font.ITALIC;

         display.setFont( new Font( 
            display.getFont().getName(), style, 72 ) );

         repaint();
      }
   }
}