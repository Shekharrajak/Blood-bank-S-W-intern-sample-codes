/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package resturant.menuentry;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import reusableClass.Function;
import reusableClass.Validator;

/**
 *
 * @author SUSHIL
 */
public class MenuEntryView extends javax.swing.JDialog {
    private int ItemId;
    private int UnitId ;
    private int HybridItemId;
    private int HybridUnitId;
   // private String IssueId= new String();
    private int  CategoryId ;
    //private String 
    private int MenuId;
    private DefaultComboBoxModel modelItemName;
    private DefaultComboBoxModel modelItemBaseUnit;
    private DefaultComboBoxModel modelItemCategory;
    private boolean Trackable;
    private ListSelectionModel selectionModel;
    private ListSelectionModel HybridselectionModel;
    private int HybridLead = 0;
    private boolean HybridFlag  = false;
    private Object HybridData[][] ;
    private String ImagePath ;
    private BufferedImage  buffImage;
    private File file;
    private int Departmentid;
    private boolean Edit_Flag = false;
    /**
     * Creates new form MenuEntryView
     */
    public MenuEntryView(JFrame parent,boolean modal) {
        super(parent,modal);
        initComponents();
      //  txtWholesalePrice.setVisible(false);
        txtWholesalePrice.setEditable(false);
         selectionModel = tblMenuItem.getSelectionModel();
       selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       HybridselectionModel = tblHybridMenuItem.getSelectionModel();
       HybridselectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       txtMenuName.requestFocusInWindow();
       disableDeleteBtn();
       disableEditBtn();
      // disableHybridBtn();
       setButtonForEnter(btnAdd);
       setButtonForEnter(btnCancel);
       setButtonForEnter(btnDelete);
       setButtonForEnter(btnEdit);
       setButtonForEnter(btnHybridAdd);
       setButtonForEnter(btnHybridCancel);
       setButtonForEnter(btnHybridFinish);
       setButtonForEnter(btnHybrid);
       setButtonForEnter(btnUploadIlmage);
       Validator.DecimalMaker(txtQuantity);
       Validator.DecimalMaker(txtRetailPrice);
       txtHybridQuantity.addFocusListener(new SetFocusListener(txtHybridQuantity));
       txtMenuName.addFocusListener(new SetFocusListener(txtMenuName));
       txtQuantity.addFocusListener(new Function.SetJFormattedTextFieldFocusListener(txtQuantity));
//       txtRetailPrice.addFocusListener(new Function.SetJFormattedTextFieldFocusListener(txtRetailPrice));
       txtRetailPrice.addFocusListener(new Function.SetJFormattedTextFieldFocusListener(txtRetailPrice));
       txtWholesalePrice.addFocusListener(new Function.SetJFormattedTextFieldFocusListener(txtWholesalePrice));
       /*
        * centering
        */
        setLocationRelativeTo(null);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do 9806506676 NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        MenuEntryHybridDialog = new javax.swing.JDialog();
        lblItemName1 = new javax.swing.JLabel();
        comboHybridItemName = new javax.swing.JComboBox();
        txtHybridQuantity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comboHybridItemBaseUnit = new javax.swing.JComboBox();
        btnHybridAdd = new javax.swing.JButton();
        btnHybridCancel = new javax.swing.JButton();
        btnHybridFinish = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHybridMenuItem = new javax.swing.JTable();
        btnHybridDelete = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMenuItem = new javax.swing.JTable(){
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column){
                Component c = super.prepareRenderer(renderer,row,column);
                if(!isRowSelected(row)){
                    c.setBackground(getBackground());
                    int ModelRow = convertRowIndexToModel(row);
                    // int ModelColumn = convertColumnIndexToModel(column);

                    //getting the value of boolean for true and false and changin color
                    Boolean type = (Boolean)getModel().getValueAt(ModelRow,8);
                    // Boolean hybridType = (Boolean)getModel().getValueAt(ModelRow,9);
                    if(true == type ){
                        c.setBackground(new Color(205,185,215));
                        /* if(true == hybridType ){
                            getColumnModel().getColumn(9).s
                        }
                        */
                    }
                    if(false == type ){
                        c.setBackground(new Color(227,197,132));
                    }

                }
                return c;
            }

        };
        btnEdit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMenuName = new javax.swing.JTextField();
        lblItemName = new javax.swing.JLabel();
        comboItemName = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboItemBaseUnit = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        lblWholesalePrice = new javax.swing.JLabel();
        radioWholesaleClick = new javax.swing.JRadioButton();
        radioTrackable = new javax.swing.JRadioButton();
        radioNonTrackable = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnUploadIlmage = new javax.swing.JButton();
        ImageLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboItemCategory = new javax.swing.JComboBox();
        btnHybrid = new javax.swing.JButton();
        lblstorename = new javax.swing.JLabel();
        ComboDepartmentName = new javax.swing.JComboBox();
        txtQuantity = new javax.swing.JFormattedTextField();
        txtRetailPrice = new javax.swing.JFormattedTextField();
        txtWholesalePrice = new javax.swing.JFormattedTextField();

        MenuEntryHybridDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        MenuEntryHybridDialog.setTitle("Hybrid Menu Entry");
        MenuEntryHybridDialog.setMinimumSize(new java.awt.Dimension(497, 322));
        MenuEntryHybridDialog.setModal(true);
        MenuEntryHybridDialog.setResizable(false);

        lblItemName1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblItemName1.setText("Item Name:");

        comboHybridItemName.setActionCommand("HybridItemName");
        comboHybridItemName.setName("ItemName"); // NOI18N

        txtHybridQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHybridQuantityActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Quantity:*");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Item Base Unit");

        comboHybridItemBaseUnit.setActionCommand("HybridItemBaseUnit");
        comboHybridItemBaseUnit.setMinimumSize(new java.awt.Dimension(100, 100));
        comboHybridItemBaseUnit.setPreferredSize(new java.awt.Dimension(100, 20));

        btnHybridAdd.setText("Add");
        btnHybridAdd.setActionCommand("HybridAdd");

        btnHybridCancel.setText("Cancel");
        btnHybridCancel.setActionCommand("HybridCancel");

        btnHybridFinish.setText("Finish");
        btnHybridFinish.setActionCommand("HybridFinish");

        tblHybridMenuItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblHybridMenuItem);

        btnHybridDelete.setText("Delete");
        btnHybridDelete.setActionCommand("HybridDelete");
        btnHybridDelete.setEnabled(false);

        javax.swing.GroupLayout MenuEntryHybridDialogLayout = new javax.swing.GroupLayout(MenuEntryHybridDialog.getContentPane());
        MenuEntryHybridDialog.getContentPane().setLayout(MenuEntryHybridDialogLayout);
        MenuEntryHybridDialogLayout.setHorizontalGroup(
            MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuEntryHybridDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuEntryHybridDialogLayout.createSequentialGroup()
                        .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MenuEntryHybridDialogLayout.createSequentialGroup()
                                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblItemName1)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboHybridItemName, 0, 100, Short.MAX_VALUE)
                                    .addComponent(txtHybridQuantity))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                            .addGroup(MenuEntryHybridDialogLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnHybridAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHybridDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnHybridCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboHybridItemBaseUnit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnHybridFinish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(48, 48, 48))
                    .addGroup(MenuEntryHybridDialogLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        MenuEntryHybridDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnHybridAdd, btnHybridDelete});

        MenuEntryHybridDialogLayout.setVerticalGroup(
            MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuEntryHybridDialogLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboHybridItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHybridQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboHybridItemBaseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHybridDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MenuEntryHybridDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnHybridAdd)
                        .addComponent(btnHybridCancel)
                        .addComponent(btnHybridFinish)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        MenuEntryHybridDialogLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnHybridAdd, btnHybridDelete});

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Menu Entry Window");

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setMnemonic('D');
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setMnemonic('A');
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancel.setMnemonic('C');
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu "));

        tblMenuItem.setAutoCreateRowSorter(true);
        tblMenuItem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblMenuItem.setRowHeight(20);
        jScrollPane2.setViewportView(tblMenuItem);
        tblMenuItem.getTableHeader().setReorderingAllowed(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
        );

        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnEdit.setMnemonic('E');
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu Setup"));
        jPanel1.setName("Wholesale"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Menu Name:*");

        txtMenuName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMenuName.setPreferredSize(new java.awt.Dimension(109, 20));

        lblItemName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblItemName.setText("Item Name:*");

        comboItemName.setActionCommand("ItemName");
        comboItemName.setName("ItemName"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Quantity:*");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Item Base Unit:*");

        comboItemBaseUnit.setActionCommand("ItemBaseUnit");
        comboItemBaseUnit.setMinimumSize(new java.awt.Dimension(100, 100));
        comboItemBaseUnit.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Retail Price:*");

        lblWholesalePrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblWholesalePrice.setText("Wholesale Price:");

        radioWholesaleClick.setSelected(true);
        radioWholesaleClick.setText("Wholesale");

        buttonGroup1.add(radioTrackable);
        radioTrackable.setSelected(true);
        radioTrackable.setText("Trackable");
        radioTrackable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTrackableActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioNonTrackable);
        radioNonTrackable.setText("NonTrackable");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Item type:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Image:");

        btnUploadIlmage.setMnemonic('P');
        btnUploadIlmage.setText("Upload");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Item Category:*");

        comboItemCategory.setActionCommand("ItemCategory");

        btnHybrid.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnHybrid.setText("Make Hybrid Menu Item");
        btnHybrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHybridActionPerformed(evt);
            }
        });

        lblstorename.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblstorename.setText("Department Name:");

        ComboDepartmentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboDepartmentName.setActionCommand("ComboStoreName");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtRetailPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtWholesalePrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtWholesalePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWholesalePriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblItemName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnUploadIlmage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboItemName, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMenuName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(txtQuantity)
                                    .addComponent(txtRetailPrice, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblstorename)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(radioTrackable, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(radioNonTrackable, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ComboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(238, 238, 238)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblWholesalePrice)
                        .addGap(26, 26, 26)
                        .addComponent(radioWholesaleClick, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWholesalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboItemBaseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboItemCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHybrid)))
                .addGap(90, 90, 90))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel4, jLabel9, lblWholesalePrice});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, lblstorename});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ComboDepartmentName, txtMenuName});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblstorename)
                            .addComponent(ComboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 20, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(radioTrackable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(radioNonTrackable))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(btnHybrid))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMenuName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(comboItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtRetailPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboItemCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboItemBaseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtWholesalePrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblWholesalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(radioWholesaleClick)))
                        .addGap(5, 5, 5)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnUploadIlmage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, lblstorename});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ComboDepartmentName, comboItemName});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblWholesalePrice, txtWholesalePrice});

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioTrackableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTrackableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioTrackableActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnHybridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHybridActionPerformed
        // TODO add your handling code here:
        
       
    }//GEN-LAST:event_btnHybridActionPerformed

    private void txtHybridQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHybridQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHybridQuantityActionPerformed

    private void txtWholesalePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWholesalePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWholesalePriceActionPerformed
    public void setBufferedImage(BufferedImage buff){
        buffImage = buff;
    }
    public BufferedImage getBufferedImage(){
        return buffImage;
    }
    public File getImageFile(){
        return file;
    }
    public void setImageFile(File fl){
        file = fl;
    }
    public void setImageLabel(ImageIcon img){
        ImageLabel.setIcon(img);
    }
    public ImageIcon getImageLabel(){
        return (ImageIcon) ImageLabel.getIcon();
    }
     public void setImagePath(String mname){
       ImagePath= mname;
    }
    public String getImagePath(){
      return  ImagePath;
    }
   
    public void setMenuName(String mname){
       txtMenuName.setText(mname);
    }
    public String getMenuName(){
      return  txtMenuName.getText();
    }
    public void setTrackable(boolean fg){
      // txtMenuName.setText(mname);
        Trackable = fg;
    }
    public boolean getTrackable(){
      return  Trackable;
    }
//    public void setQuantity(String qty){
//        txtQuantity.setText(qty);
//    }
//    public String getQuantity(){
//        return txtQuantity.getText();
//    }
    public void setQuantity(Double qty){
        txtQuantity.setValue(new Double(qty));
    }
    public Double getQuantity(){
        return ((Number)txtQuantity.getValue()).doubleValue();
    }
     public void setHybridQuantity(String qty){
        txtHybridQuantity.setText(qty);
    }
    public String getHybridQuantity(){
        return txtHybridQuantity.getText();
    }
//    public String getRetailPrice(){
//       return txtRetailPrice.getText();
//    }
//    public void setRetailPrice(String RetailPrice){
//        txtRetailPrice.setText(RetailPrice);
//    }
     public Double getRetailPrice(){
       return ((Number)txtRetailPrice.getValue()).doubleValue();
    }
    public void setRetailPrice(Double RetailPrice){
        txtRetailPrice.setValue(RetailPrice);
    }
//    public void setWholesalePrice(String WholesalePrice){
//        txtWholesalePrice.setText(WholesalePrice);
//    }
//    public String getWholesalePrice(){
//        return txtWholesalePrice.getText();
//    }
    public void setWholesalePrice(Double WholesalePrice){
        txtWholesalePrice.setValue(new Double(WholesalePrice));
    }
    public Double getWholesalePrice(){
        return ((Number)txtWholesalePrice.getValue()).doubleValue();
    }
  
     public void setUnitId(int id){
       UnitId = id;
    }
    public int getUnitId(){
        return UnitId;
    }
    public void setItemId(int id){
        ItemId = id;
    }
    public int getItemId(){
        return ItemId;
    }

    public int getHybridItemId() {
        return HybridItemId;
    }

    public void setHybridItemId(int HybridItemId) {
        this.HybridItemId = HybridItemId;
    }

    public int getHybridUnitId() {
        return HybridUnitId;
    }

    public void setHybridUnitId(int HybridUnitId) {
        this.HybridUnitId = HybridUnitId;
    }
    
    public void setMenuId(int id){
        MenuId = id;
    }
    public int getMenuId(){
        return MenuId;
    }
     public void setCategoryId(int id){
        CategoryId = id;
    }
    public int getCategoryId(){
        return CategoryId;
    }
     public void setDepartmentId(int id){
        Departmentid = id;
    }
    public int getDepartmentId(){
        return Departmentid;
    }
    
    public boolean isEdit_Flag() {
        return Edit_Flag;
    }

    public void setEdit_Flag(boolean Edit_Flag) {
        this.Edit_Flag = Edit_Flag;
    }

    public int getHybridLead() {
        return HybridLead;
    }

    public void setHybridLead(int HybridLead) {
        this.HybridLead = HybridLead;
    }
    
    public boolean checkWholepriceChecked(){
        return radioWholesaleClick.isSelected();
    }
    public void loadImage(String imagepath){
//        String path = "src/images/"+imagepath;
//        URL path = getClass().getResource("/images/"+imagepath);
     //   ImageLabel.setIcon(new ImageIcon("images\"+imagepath));
        ImageLabel.setIcon(new ImageIcon("resources/images/"+imagepath));
    }
     public void loadImage(Object image){
//        String path = "src/images/"+imagepath;
//        URL path = getClass().getResource("/images/"+imagepath);
     //   ImageLabel.setIcon(new ImageIcon("images\"+imagepath));
         if(image!= null){
        ImageLabel.setIcon(new ImageIcon((byte[])image));
         }
         else{
             ImageLabel.setIcon(null);
         }
    }
    public void checkedWholesalePrice(){
        radioWholesaleClick.setSelected(true);
    }
    public void uncheckedWholesalePrice(){
        radioWholesaleClick.setSelected(false);
    }
   public void setTrackableUntrackable(Boolean boo){
   if(boo){
       radioTrackable.setSelected(true);
       radioNonTrackable.setEnabled(false);
       radioTrackable.setEnabled(true);
//       buttonGroup1.setSelected(radioTrackable.getModel(), true);
       
   }
   else{
//       radioNonTrackable.setSelected(false);
       radioTrackable.setEnabled(false);
       radioNonTrackable.setEnabled(true);
       radioNonTrackable.setSelected(true);
//       buttonGroup1.setSelected(radioNonTrackable.getModel(), true);
   }
   }
     public boolean getHybridFlag(){
       return HybridFlag;
   }
     public void setHybridFlag(boolean f){
         HybridFlag = f;
     }
    public String getItemName(){
        return comboItemName.getSelectedItem().toString();
    }
    public void setItemName(String name){
        comboItemName.setSelectedItem(name);
    }
     public String getItemBaseUnit(){
        return comboItemBaseUnit.getSelectedItem().toString();
    }
    public void setItemBaseUnit(String name){
        comboItemBaseUnit.setSelectedItem(name);
    }
     public String getHybridItemName(){
        return comboHybridItemName.getSelectedItem().toString();
    }
    public void setHybridItemName(String name){
        comboHybridItemName.setSelectedItem(name);
    }
     public String getHybridItemBaseUnit(){
        return comboHybridItemBaseUnit.getSelectedItem().toString();
    }
    public void setHybridItemBaseUnit(String name){
        comboHybridItemBaseUnit.setSelectedItem(name);
    }
     public String getItemCategory(){
        return comboItemCategory.getSelectedItem().toString();
    }
    public void setItemCategory(String name){
        comboItemCategory.setSelectedItem(name);
    }
    //for store name
    public void setComboDepartmentName(Object[] name){
        DefaultComboBoxModel model = new DefaultComboBoxModel(name);
        ComboDepartmentName.setModel(model);
//        ComboDepartmentName.setSelectedIndex(0);
    }
    public void setComboDepartmentName(String selectedname){
        ComboDepartmentName.setSelectedItem(selectedname);
    }
    public String getComboDepartmentName(){
        return ComboDepartmentName.getSelectedItem().toString();
    }
    public JComboBox returnComboDepartmentName(){
    return ComboDepartmentName;
    }
        
    
    public void setHybridData(Object[][] obj){
        HybridData = obj;
    }
    public Object[][] getHybridData(){
        return HybridData;
    }
    
    
    public boolean checkTrackableUntrackable(){
        //if trackable is selected return true
        boolean flag= false;
        if(radioTrackable.isSelected()){
            flag=true;
        }
        else if(radioNonTrackable.isSelected()){
       flag=false;
       
    
    }
        return flag;
    }
    public void showItemName(){
        lblItemName.setVisible(true);
        comboItemName.setVisible(true);
    }
    public void hideItemName(){
        lblItemName.setVisible(false);
        comboItemName.setVisible(false);
    }
    public void showStoreName(){
        lblstorename.setVisible(true);
        ComboDepartmentName.setVisible(true);
    }
    public void hideStoreName(){
        lblstorename.setVisible(false);
        ComboDepartmentName.setVisible(false);
    }
    public void setEditableWholesalePricetrue(){
      //  lblWholesalePrice.setVisible(true);
       // radioWholesaleClick.setVisible(true);
        txtWholesalePrice.setEditable(true);
       // txtWholesalePrice.setVisible(true);
    }
    public void setEditableWholesalePricefalse(){
       // lblWholesalePrice.setVisible(false);
       // radioWholesaleClick.setVisible(false);
       txtWholesalePrice.setEditable(false);
       // txtWholesalePrice.setVisible(false);
    }
    public void ClickCancelBtn(){
        btnCancel.doClick();
    }
    public void setRadioEnableTrackable(boolean b){
        radioTrackable.setEnabled(b);
    }
    public void setRadioEnableUnTrackable(boolean b){
        radioNonTrackable.setEnabled(b);
//        jPanel1.setEnabled(false);
    }
    public final void setButtonForEnter(JButton jb){
         jb.registerKeyboardAction(jb.getActionForKeyStroke(
                                      KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0, false)),
                                      KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false),
                                      JComponent.WHEN_FOCUSED);
 
        jb.registerKeyboardAction(jb.getActionForKeyStroke(
                                      KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0, true)),
                                      KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true),
                                      JComponent.WHEN_FOCUSED);
        
    }
    public final class SetFocusListener implements FocusListener{
      JTextField jf;
        public SetFocusListener(JTextField field){
         jf = field;   
        }

        @Override
        public void focusGained(FocusEvent e) {
         //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
         jf.setBackground(new Color(136,249,168));
         jf.selectAll();
        }

        @Override
        public void focusLost(FocusEvent e) {
        //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       jf.setBackground(Color.white);
        }
        
    }
    
     public void setOnComboItemNameSelect(Object[] item){
      //SELECT resturant_store.item_id,centerstore_stock.item_name,resturant_store.unit_id,item_unit.unit_name,item_unit.unit_relative_quantity,item_unit.unit_type,centerstore_stock.category_id,item_category.category_name
         setItemId(Integer.parseInt(item[0].toString()));
         setItemName(item[1].toString());
         setUnitId(Integer.parseInt(item[2].toString()));
       //  setComboItemBaseUnit(new String[]{item[3].toString()});
         setComboItemBaseUnit(item[3].toString());
         setCategoryId(Integer.parseInt(item[6].toString()));
         setComboItemCategory(item[7].toString());
     }
     public void setOnComboHybridItemNameSelect(Object[] item){
      //SELECT resturant_store.item_id,centerstore_stock.item_name,resturant_store.unit_id,item_unit.unit_name,item_unit.unit_relative_quantity,item_unit.unit_type,centerstore_stock.category_id,item_category.category_name
         setHybridItemId(Integer.parseInt(item[0].toString()));
         setHybridItemName(item[1].toString());
         setHybridUnitId(Integer.parseInt(item[2].toString()));
       //  setComboItemBaseUnit(new String[]{item[3].toString()});
         setComboHybridItemBaseUnit(item[3].toString());
       //  setCategoryId(item[6].toString());
       //  setComboItemCategory(new String[]{item[7].toString()});
     }
     public void clearItemBaseUnit(){
         comboItemBaseUnit.removeAllItems();
     }
      public void clearItemCategory(){
         comboItemCategory.removeAllItems();
     }
      public DefaultTableModel returnTableModelMenuItem(){
          return (DefaultTableModel)tblMenuItem.getModel();
      }
   
    public void  setComboItemName(Object[] itemname){
//        for(Object sr:itemname){
//              System.out.println(sr.toString());
//          }
        modelItemName = new DefaultComboBoxModel(itemname);
        comboItemName.setModel(modelItemName);
    }
    public void setComboItemBaseUnit(String[] baseunit){
        modelItemBaseUnit = new DefaultComboBoxModel(baseunit);
        comboItemBaseUnit.setModel(modelItemBaseUnit);
    }
     public void setComboItemBaseUnit(String baseunit){
       // modelItemBaseUnit = new DefaultComboBoxModel(baseunit);
        comboItemBaseUnit.setSelectedItem(baseunit);
    }
     //hybrid
      public void  setComboHybridItemName(String[] itemname){
          
        modelItemName = new DefaultComboBoxModel(itemname);
        comboHybridItemName.setModel(modelItemName);
    }
    public void setComboHybridItemBaseUnit(String[] baseunit){
        modelItemBaseUnit = new DefaultComboBoxModel(baseunit);
        comboHybridItemBaseUnit.setModel(modelItemBaseUnit);
    }
     public void setComboHybridItemBaseUnit(String baseunit){
       // modelItemBaseUnit = new DefaultComboBoxModel(baseunit);
        comboHybridItemBaseUnit.setSelectedItem(baseunit);
    }
    public void setComboItemCategory(String[] category){
        modelItemCategory = new DefaultComboBoxModel(category);
        comboItemCategory.setModel(modelItemCategory);
    }
     public void setComboItemCategory(String category){
    //    modelItemCategory = new DefaultComboBoxModel(category);
        //comboItemCategory.setModel(modelItemCategory);
         comboItemCategory.setSelectedItem(category);
    }
     public void  enableAddBtn(){
         btnAdd.setEnabled(true);
     }
     public  void disableAddBtn(){
         btnAdd.setEnabled(false);
     }
     
     public void  enableHybridAddBtn(){
         btnHybridAdd.setEnabled(true);
     }
     public  void disableHybridAddBtn(){
         btnHybridAdd.setEnabled(false);
     }
     public void  enableHybridCancelBtn(){
         btnHybridCancel.setEnabled(true);
     }
     public  void disableHybridCancelBtn(){
         btnHybridCancel.setEnabled(false);
     }
     public void  enableHybridFinishBtn(){
         btnHybridFinish.setEnabled(true);
     }
     public  void disableHybridFinishBtn(){
         btnHybridFinish.setEnabled(false);
     }
     public void setHybridDeleteBtnEnable(boolean bl){
         btnHybridDelete.setEnabled(bl);
     }
     public void enableEditBtn(){
         btnEdit.setEnabled(true);
     }
     public void disableEditBtn(){
         btnEdit.setEnabled(false);
     }
     public void enableDeleteBtn(){
         btnDelete.setEnabled(true);
     }
     public void disableDeleteBtn(){
         btnDelete.setEnabled(false);
     }
      public void enableHybridBtn(){
         btnHybrid.setEnabled(true);
     }
     public void disableHybridBtn(){
         btnHybrid.setEnabled(false);
     }
     public void clearAllHybrid(){
        setHybridItemId(0);
       
        setHybridUnitId(0);
       // setItemBaseUnit("");
        setHybridQuantity("");
       
        comboHybridItemName.setSelectedIndex(0);
        comboHybridItemBaseUnit.setSelectedIndex(0);
       // comboItemBaseUnit.removeAllItems();
       // comboItemCategory.setSelectedIndex(0);  
         
     }
        public void clearAll(){
        setItemId(0);
       // setItemName("");
        setMenuId(0);
        setMenuName("");
        setUnitId(0);
       // setItemBaseUnit("");
        setQuantity(0.0);
        setRetailPrice(0.0);
        setWholesalePrice(0.0);
        comboItemName.setSelectedIndex(0);
        comboItemBaseUnit.setSelectedIndex(0);
       // comboItemBaseUnit.removeAllItems();
        comboItemCategory.setSelectedIndex(0);
        setHybridFlag(false);
        setImagePath("");
        setImageLabel(null);
            setBufferedImage(null);
    }
    public String[]  getMenuEntry(){
     //if trackable is selected return true
        String[] menuInfo = new String[14];
     
            menuInfo[0] = String.valueOf(checkTrackableUntrackable());
            menuInfo[1] = String.valueOf(getItemId());
            menuInfo[2] = getItemName();
            menuInfo[3] = String.valueOf(getMenuId());
            menuInfo[4] = getMenuName();
            menuInfo[5] = String.valueOf(getUnitId());
            menuInfo[6] = getItemBaseUnit();
            menuInfo[7] = String.valueOf(getQuantity());
            menuInfo[8] = String.valueOf(getRetailPrice());
           if(checkWholepriceChecked()){
            menuInfo[9] = ""; 
                    }
           else if(!checkWholepriceChecked()){
            menuInfo[9] = String.valueOf(getWholesalePrice());
        }
         menuInfo[10] = String.valueOf(getCategoryId());
         menuInfo[11] = String.valueOf(getHybridFlag());
         menuInfo[12] = getImagePath();
         menuInfo[13]= String.valueOf(getDepartmentId());
        
         return menuInfo;
       
    }
    public void setComboDepartmentEnable(boolean bl){
        ComboDepartmentName.setEnabled(bl);
    }
   
    public void setMenuEntry(String[] info){
    
//         setHybridFlag(Boolean.parseBoolean(info[9]));//this should be first
//         JOptionPane.showMessageDialog(rootPane, getHybridFlag());
         
//        setTrackableUntrackable(Boolean.parseBoolean(info[8]));
//        setTrackable(Boolean.parseBoolean(info[8]));
        
//         setComboDepartmentName(new Object[]{info[10]});
      //  radioNonTrackable.setSelected(Boolean.parseBoolean(info[8]));
        if(!getTrackable()){
            hideItemName();
        }
        else{
            
            showItemName();
            
        }
        setMenuId(Integer.parseInt(info[0]));
        setMenuName(info[1]);
        setItemName(info[2]);
        setQuantity(Double.parseDouble(info[3]));
        setComboItemBaseUnit(info[4]);
        setRetailPrice(Double.parseDouble(info[5]));
        if(info[6].isEmpty()){
            checkedWholesalePrice();
               setEditableWholesalePricefalse();
               setWholesalePrice(0.0);
           
        }
        else{
            uncheckedWholesalePrice();
            setWholesalePrice(Double.parseDouble(info[6]));
           setEditableWholesalePricetrue();
         
        }
       /* if(!checkWholepriceChecked()){
        setWholesalePrice(info[6]);
        }*/
        setComboItemCategory(info[7]);
        
//         System.out.println(info[7]);
       
       
      //  setImagePath(info[10]);
        
    }
    public void addAddListener(ActionListener ListenForAdd){
        btnAdd.addActionListener(ListenForAdd);
    }
    public void addHybridAddListener(ActionListener ListenForAdd){
        btnHybridAdd.addActionListener(ListenForAdd);
    }
    public void addKeyAddListener(KeyListener ListenForAdd){
        btnAdd.addKeyListener(ListenForAdd);
    }
    public void addEditListener(ActionListener ListenForEdit){
        btnEdit.addActionListener(ListenForEdit);
    }
    public  void addKeyEditListener(KeyListener ListenForEdit){
        btnEdit.addKeyListener(ListenForEdit);
    }
    public void addCancelListener(ActionListener ListenForCancel){
        btnCancel.addActionListener(ListenForCancel);
    }
     public void addHybridCancelListener(ActionListener ListenForCancel){
        btnHybridCancel.addActionListener(ListenForCancel);
    }
     public void addHybridFinishListener(ActionListener ListenForFinish){
         btnHybridFinish.addActionListener(ListenForFinish);
     }
      public void addHybridDeleteListener(ActionListener Listen){
          btnHybridDelete.addActionListener(Listen);
      }
    public void addKeyCancelListener(KeyListener ListenForCancel){
        btnCancel.addKeyListener(ListenForCancel);
    }
     public void addDeleteListener(ActionListener ListenForDelete){
        btnDelete.addActionListener(ListenForDelete);
    }
    public void addKeyDeleteListener(KeyListener ListenForDelete){
        btnAdd.addKeyListener(ListenForDelete);
    }
    public void addTrackableListener(ActionListener ListenForTrack){
        radioNonTrackable.addActionListener(ListenForTrack);
        radioTrackable.addActionListener(ListenForTrack);
    }
    public void addWholesaleListener(ActionListener ListenForWholesale){
        radioWholesaleClick.addActionListener(ListenForWholesale);
    }
     public void addWholesaleItemListener(ItemListener ListenForWholesale){
        radioWholesaleClick.addItemListener(ListenForWholesale);
    }
    public void addComboItemNameSelectListener(ActionListener ListenForSelect){
        comboItemName.addActionListener(ListenForSelect);
    }
    
    public void addComboItemBaseUnitSelectListener(ActionListener ListenForSelect){
        comboItemBaseUnit.addActionListener(ListenForSelect);
    }
     public void addComboHybridItemNameSelectListener(ActionListener ListenForSelect){
        comboHybridItemName.addActionListener(ListenForSelect);
    }
    
    public void addComboHybridItemBaseUnitSelectListener(ActionListener ListenForSelect){
        comboHybridItemBaseUnit.addActionListener(ListenForSelect);
    }
    public void addComboItemCategoryListener(ActionListener ListenForSelect){
        comboItemCategory.addActionListener(ListenForSelect);
    }
    //for storename
    public void addComboStoreNameListener(ActionListener Listen){
        ComboDepartmentName.addActionListener(Listen);
    }
    public void addHybridMenuItemListener(ActionListener ListenForHybrid){
       btnHybrid.addActionListener(ListenForHybrid);
    }
    public void addMenuNameListener(ActionListener ListenForMenuName){
        txtMenuName.addActionListener(ListenForMenuName);
    }
     public void addImageUploadListener(ActionListener ListenForUpload){
        btnUploadIlmage.addActionListener(ListenForUpload);
    }
     public void addItemTrackableListener(ItemListener Listen){
         radioTrackable.addItemListener(Listen);
     }
    
    public void  refreshJTable(final DefaultTableModel model){
        try{
            tblMenuItem.setModel(model);
        }
        catch(Exception e){
         //   System.out.println(e.getMessage()+"from refreshjtable");
        }
    }
    public void refreshHybridTable(DefaultTableModel model){
        tblHybridMenuItem.setModel(model);
    }
    public void clearJTable(){
     /*  DefaultTableModel model = (DefaultTableModel) tblMenuItem.getModel();
       model.setRowCount(0);*/
  /*  SwingUtilities.invokeLater(new Runnable() {

        @Override
        public void run() {
          //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel dm = (DefaultTableModel)tblMenuItem.getModel();
dm.getDataVector().removeAllElements();
tblMenuItem.repaint();
        }
    });*/
    DefaultTableModel dm = (DefaultTableModel)tblMenuItem.getModel();
dm.getDataVector().removeAllElements();
tblMenuItem.repaint();
       

//tblMenuItem.setModel(dm);
        // tblMenuItem.setModel(new DefaultTableModel());
        
    }
    public void addRowSelectionListener(ListSelectionListener ListenForRow){
     selectionModel.addListSelectionListener(ListenForRow);
    }
    public void addHybridRowSelectionListener(ListSelectionListener Listen){
        HybridselectionModel.addListSelectionListener(Listen);
    }
    
     public JComboBox returnComboItemName(){
         return comboItemName;
     }
     public JComboBox returnComboItemBaseUnit(){
         return comboItemBaseUnit;
     }
     public JComboBox returnComboItemCategory(){
         return comboItemCategory;
     }
     public JComboBox returnComboHybridItemName(){
         return comboHybridItemName;
     }
     public JComboBox returnComboHybridItemBaseUnit(){
         return comboHybridItemBaseUnit;
     }
     public void initComboBox(){
         comboHybridItemBaseUnit.setSelectedIndex(0);
         comboHybridItemName.setSelectedIndex(0);
         comboItemBaseUnit.setSelectedIndex(0);
         comboItemCategory.setSelectedIndex(0);
         comboItemName.setSelectedIndex(0);
     }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuEntryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuEntryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuEntryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuEntryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuEntryView(new JFrame(),true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboDepartmentName;
    public javax.swing.JLabel ImageLabel;
    public javax.swing.JDialog MenuEntryHybridDialog;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHybrid;
    private javax.swing.JButton btnHybridAdd;
    private javax.swing.JButton btnHybridCancel;
    private javax.swing.JButton btnHybridDelete;
    private javax.swing.JButton btnHybridFinish;
    private javax.swing.JButton btnUploadIlmage;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboHybridItemBaseUnit;
    private javax.swing.JComboBox comboHybridItemName;
    private javax.swing.JComboBox comboItemBaseUnit;
    private javax.swing.JComboBox comboItemCategory;
    private javax.swing.JComboBox comboItemName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblItemName1;
    private javax.swing.JLabel lblWholesalePrice;
    private javax.swing.JLabel lblstorename;
    public javax.swing.JRadioButton radioNonTrackable;
    public javax.swing.JRadioButton radioTrackable;
    public javax.swing.JRadioButton radioWholesaleClick;
    public javax.swing.JTable tblHybridMenuItem;
    public javax.swing.JTable tblMenuItem;
    private javax.swing.JTextField txtHybridQuantity;
    private javax.swing.JTextField txtMenuName;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JFormattedTextField txtRetailPrice;
    private javax.swing.JFormattedTextField txtWholesalePrice;
    // End of variables declaration//GEN-END:variables
}
